# TODO:
#	- In bytecode.cpp when cleaning up the stack in a function return call
#	  this only has to be done when there acutally is more than 0 args
#	- Add support for using function arguments
#	- Complete the expression type finder and complete all types of type checking
#	- Use /\ to generate the proper math op
#
# TODO_SOME_TIME_IN_THE_FUTURE:
#	- Implement structs
#	- Standardize types? ie. int is a keyword?


# declare variable of struct
# var test: struct SomeStruct;
# instead of var struct test: SomeStruct;

var test: int;
test = 4*2;

var c:int = 32 * 45;

# Would store the name print, and the number of arguments
# the bytecode generated should look something like
# CALL_NATIVE, name, nargs
# The actual fuction might look like:
# 
# uint32_t print_int(VirtualMachine *vm) {
# 	int32_t val = vm->stack[vm->sp--];
# 	printf("%d", val);
# 	return 0;
# }
# 
# The decleration
#
# cfunction print_int Integer i;
# cfunction println;
# cfunction native_add Integer a, Integer b;

func add|a: int, b: int| {
	var local: int = 1024*256;
	
	# Does not works since the bytecode expression writer
	# doesnt yet support variables
	return local;
}

add|11, 14|;
add|11, 14|;

func hello|| {
	
}
hello||;

var k:int = 12*666/2;

# change this into a OP_GRET
# a OP_GRET is basically a halt.
# assumes theres a value on the stack
return 4 - 5;
